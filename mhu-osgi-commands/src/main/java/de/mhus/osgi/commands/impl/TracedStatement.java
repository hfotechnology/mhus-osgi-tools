/**
 * Copyright 2018 Mike Hummel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.mhus.osgi.commands.impl;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import de.mhus.osgi.commands.db.TraceDataSource;

public class TracedStatement implements Statement {
	
	private Statement instance;
	private TracedConnection con;
	private TraceDataSource ds;

	public TracedStatement(Statement createStatement,
			TracedConnection delegateConnection) {
		instance = createStatement;
		con = delegateConnection;
		ds = (TraceDataSource) con.getDataSource();
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		return instance.unwrap(iface);
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		long time = ds.startTrace(sql);
		try {
			return instance.executeQuery(sql);
		} finally {
			ds.stopTrace(time,sql);
		}
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return instance.isWrapperFor(iface);
	}

	public int executeUpdate(String sql) throws SQLException {
		long time = ds.startTrace(sql);
		try {
			return instance.executeUpdate(sql);
		} finally {
			ds.stopTrace(time,sql);
		}
	}

	public void close() throws SQLException {
		instance.close();
	}

	public int getMaxFieldSize() throws SQLException {
		return instance.getMaxFieldSize();
	}

	public void setMaxFieldSize(int max) throws SQLException {
		instance.setMaxFieldSize(max);
	}

	public int getMaxRows() throws SQLException {
		return instance.getMaxRows();
	}

	public void setMaxRows(int max) throws SQLException {
		instance.setMaxRows(max);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		instance.setEscapeProcessing(enable);
	}

	public int getQueryTimeout() throws SQLException {
		return instance.getQueryTimeout();
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		instance.setQueryTimeout(seconds);
	}

	public void cancel() throws SQLException {
		instance.cancel();
	}

	public SQLWarning getWarnings() throws SQLException {
		return instance.getWarnings();
	}

	public void clearWarnings() throws SQLException {
		instance.clearWarnings();
	}

	public void setCursorName(String name) throws SQLException {
		instance.setCursorName(name);
	}

	public boolean execute(String sql) throws SQLException {
		long time = ds.startTrace(sql);
		try {
			return instance.execute(sql);
		} finally {
			ds.stopTrace(time,sql);
		}
	}

	public ResultSet getResultSet() throws SQLException {
		return instance.getResultSet();
	}

	public int getUpdateCount() throws SQLException {
		return instance.getUpdateCount();
	}

	public boolean getMoreResults() throws SQLException {
		return instance.getMoreResults();
	}

	public void setFetchDirection(int direction) throws SQLException {
		instance.setFetchDirection(direction);
	}

	public int getFetchDirection() throws SQLException {
		return instance.getFetchDirection();
	}

	public void setFetchSize(int rows) throws SQLException {
		instance.setFetchSize(rows);
	}

	public int getFetchSize() throws SQLException {
		return instance.getFetchSize();
	}

	public int getResultSetConcurrency() throws SQLException {
		return instance.getResultSetConcurrency();
	}

	public int getResultSetType() throws SQLException {
		return instance.getResultSetType();
	}

	public void addBatch(String sql) throws SQLException {
		instance.addBatch(sql);
	}

	public void clearBatch() throws SQLException {
		instance.clearBatch();
	}

	public int[] executeBatch() throws SQLException {
		long time = ds.startTrace("");
		try {
			return instance.executeBatch();
		} finally {
			ds.stopTrace(time,"");
		}
	}

	public Connection getConnection() throws SQLException {
		return con;
	}

	public boolean getMoreResults(int current) throws SQLException {
		return instance.getMoreResults(current);
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return instance.getGeneratedKeys();
	}

	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		long time = ds.startTrace(sql);
		try {
			return instance.executeUpdate(sql, autoGeneratedKeys);
		} finally {
			ds.stopTrace(time,sql);
		}
	}

	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		long time = ds.startTrace(sql);
		try {
			return instance.executeUpdate(sql, columnIndexes);
		} finally {
			ds.stopTrace(time,sql);
		}
	}

	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		long time = ds.startTrace(sql);
		try {
			return instance.executeUpdate(sql, columnNames);
		} finally {
			ds.stopTrace(time,sql);
		}
	}

	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		long time = ds.startTrace(sql);
		try {
			return instance.execute(sql, autoGeneratedKeys);
		} finally {
			ds.stopTrace(time,sql);
		}
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		long time = ds.startTrace(sql);
		try {
			return instance.execute(sql, columnIndexes);
		} finally {
			ds.stopTrace(time,sql);
		}
	}

	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		long time = ds.startTrace(sql);
		try {
			return instance.execute(sql, columnNames);
		} finally {
			ds.stopTrace(time,sql);
		}
	}

	public int getResultSetHoldability() throws SQLException {
		return instance.getResultSetHoldability();
	}

	public boolean isClosed() throws SQLException {
		return instance.isClosed();
	}

	public void setPoolable(boolean poolable) throws SQLException {
		instance.setPoolable(poolable);
	}

	public boolean isPoolable() throws SQLException {
		return instance.isPoolable();
	}

	public void closeOnCompletion() throws SQLException {
		instance.closeOnCompletion();
	}

	public boolean isCloseOnCompletion() throws SQLException {
		return instance.isCloseOnCompletion();
	}
}
